using System;

namespace Basics_of_programming
{
    class Program
    {
        static void Main(string[] args)
        {
            // bool: хранит значение true или false(логические литералы).
            // Представлен системным типом System.Boolean

            bool alive = true;
            bool isDead = false;
            bool isDead1;
            int a, b, c = 10;

            // ********************************


            //  byte: хранит целое число от 0 до 255 и занимает 1 байт.
            //  Представлен системным типом System.Byte

            byte bit1 = 1;

            // ********************************


            //sbyte: хранит целое число от -128 до 127 и занимает 1 байт.
            //Представлен системным типом System.SByte

            sbyte bit1s = -101;


            // ********************************


            // short: хранит целое число от -32768 до 32767 и занимает 2 байта.
            // Представлен системным типом System.Int16

            short n1 = 1;

            // ********************************


            // ushort: хранит целое число от 0 до 65535 и занимает 2 байта.
            // Представлен системным типом System.UInt16

            ushort n1u = 1;

            // ********************************


            // int: хранит целое число от -2 147 483 648 до 2 147 483 647 и занимает 4 байта.
            // Представлен системным типом System.Int32.
            // Все целочисленные литералы по умолчанию представляют значения типа int:

            int ai = 10;

            // ********************************


            // uint: хранит целое число от 0 до 4 294 967 295 и занимает 4 байта.
            // Представлен системным типом System.UInt32

            uint ua = 10;

            // ********************************


            // long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807
            // и занимает 8 байт.
            // Представлен системным типом System.Int64

            long al = -10;

            // ********************************


            // ulong: хранит целое число от 0 до 18 446 744 073 709 551 615
            // и занимает 8 байт.
            // Представлен системным типом System.UInt64

            ulong aL = 10;

            // ********************************


            // double: хранит число с плавающей точкой от ±5.0 * 10 - 324 до ±1.7 * 10308
            // и занимает 8 байта.
            // Все число с плавающей точкой по умолчанию представляют значения типа double:
            // Представлен системным типом System.Double

            double d = 12.3;
            double D = 3D;

            // ********************************


            // float: хранит число с плавающей точкой от -3.4 * 1038 до 3.4 * 1038 и занимает 4 байта.
            // Представлен системным типом System.Single

            float f = 5.4f;
            float F = 5.4F;


            // ********************************


            //decimal: хранит десятичное дробное число.
            //Если употребляется без десятичной запятой,
            //имеет значение от ±1.0 * 10 - 28 до ±7.9228 * 1028,
            //может хранить 28 знаков после запятой и занимает 16 байт.
            //Представлен системным типом System.Decimal

            decimal myMoney = 3000.5m;
            decimal myMoney2 = 3000.5M;

            // ********************************


            //char: хранит одиночный символ в кодировке Unicode и занимает 2 байта.
            //Представлен системным типом System.Char.Этому типу соответствуют символьные литералы:

            char ac = 'A';

            char bc = '\x5A';  // Коды символов из таблицы ASCII
            char cc = '\u0420'; // Коды символов из таблицы Unicode.

            // ********************************


            // string: хранит набор символов Unicode.
            // Представлен системным типом System.String.
            // Этому типу соответствуют строковые литералы.

            string hello = "Hello";
            string word = "world";
            string test = null;

            // ********************************


            // object: может хранить значение любого типа данных
            // и занимает 4 байта на 32 - разрядной платформе
            // и 8 байт на 64 - разрядной платформе.
            // Представлен системным типом System.Object,
            // который является базовым для всех других типов и классов.NET.

            System.Object ao = 22;
            object bo = 3.14;
            object co = "hello world";

            // ********************************


            // Использование системных типов
            // Выше при перечислении всех базовых типов данных для каждого упоминался системный тип.
            // Потому что название встроенного типа по сути представляет собой
            // сокращенное обозначение системного типа.
            // Например, следующие переменные будут эквивалентны по типу:

            //int a = 4;
            //System.Int32 b = 4;


            // ********************************


            // Неявная типизация

            var helloW = "Hell to World";
            var current = 20.5;

            // этот код работает
            int value = 20;


            // этот код не работает
            //var count;
            //count = 20;

            // этот код не работает
            //var abc = null;
            //string test1 = null;

            // ********************************

            int[] myArray; // массив 
            int[,] myMultyArray; // многомерный массив 

            int? nullableInt = null; // расширение типов значений, допускающие значение null.
                                     // Логические литералы
                                     // Есть две логических константы -true(истина) и false(ложь):

            Console.WriteLine(true);
            Console.WriteLine(false);

            // ********************************


            // Целочисленные литералы
            // Целочисленные литералы представляют положительные и отрицательные целые числа,
            // например, 1, 2, 3, 4, -7, -109.
            // Целочисленные литералы могут быть выражены в десятичной,
            // шестнадцатеричной и двоичной форме.

            Console.WriteLine(-11);
            Console.WriteLine(5);
            Console.WriteLine(505);

            // Числа в двоичной форме предваряются символами 0b,
            // после которых идет набор из нулей и единиц:

            int x = 0b11;
            Console.WriteLine(0b11);        // 3
            Console.WriteLine(0b1011);      // 11
            Console.WriteLine(0b100001);    // 33

            // Для записи числа в шестнадцатеричной форме применяются символы 0x,
            // после которых идет набор символов от 0 до 9 и от A до F,
            // которые собственно представляют число:

            Console.WriteLine(0x0A);    // 10
            Console.WriteLine(0xFF);    // 255
            Console.WriteLine(0xA1);    // 161

            // *********************************


            // Вещественные литералы
            // Вещественные литералы представляют дробные числа.
            // Этот тип литералов имеет две формы.
            // Первая форма - вещественные числа с фиксированной запятой,
            // при которой дробную часть отделяется от целой части точкой

            Console.WriteLine(3.14);
            Console.WriteLine(100.001);
            Console.WriteLine(-0.38);

            // Также вещественные литералы могут определяться в экспоненциальной форме MEp,
            // где M — мантисса,
            // E - экспонента, которая фактически означает "*10^"(умножить на десять в степени),
            // а p — порядок.

            Console.WriteLine(3.2e3);   // по сути равно 3.2 * 10<sup>3</sup> = 3200
            Console.WriteLine(1.2E-1);  // равно 1.2 * 10<sup>-1</sup> = 0.12

            // *********************************


            // Символьные литералы
            // Символьные литералы представляют одиночные символы.Символы заключаются в одинарные кавычки.
            // Символьные литералы бывают нескольких видов.Прежде всего это обычные символы:

            Console.WriteLine('2');
            Console.WriteLine('A');
            Console.WriteLine('T');

            // Специальную группу представляют управляющие последовательности
            // Управляющая последовательность представляет символ,
            // перед которым ставится слеш.
            // И данная последовательность интерпретируется определенным образом.
            // Наиболее часто используемые последовательности:

            /*
             
            '\n' - перевод строки

            '\t' - табуляция

            '\\' - слеш

            */


            // Коды символов из таблицы ASCII
            Console.WriteLine('\x78');    // x
            Console.WriteLine('\x5A');    // Z

            // Коды символов из таблицы Unicode.

            Console.WriteLine('\u0420');    // Р
            Console.WriteLine('\u0421');    // С

            // *********************************


            // Строковые литералы
            // Строковые литералы представляют строки. Строки заключаются в двойные кавычки:


            Console.WriteLine("hello");
            Console.WriteLine("фыва");
            Console.WriteLine("hello word");

            Console.WriteLine("Компания \"Рога и копыта\"");
            Console.WriteLine("Привет \nмир");

            // *********************************


            // Null литерал
            // null представляет ссылку, которая не указывает ни на какой объект.
            // То есть по сути отсутствие значения.

            // *********************************
            // Переменные 

            int count = 0;

            int count2 = 42;

            count2 = count;

            count = count2;

            double count3 = 1;

            count2 = (int)count3;




            string name;
            string Name;

            string firstName = "Ivan";
            Console.WriteLine(firstName); // "Ivan"
            firstName = "Stepa";
            Console.WriteLine(firstName); // "Stepa"

            // ********************************************************************


            // Константы

            const string LAST_NAME = "Ivanov";

            const double Pi = 3.14;

            //const string FILM_NAME; // не инициализирована

            //LAST_NAME = "Petrov"; // у констаты нельзя менять значение

            // ********************************************************************
            int i = 123;

            object o = i; // тут происходит boxing

            i = (int)o; // тут происходит unboxing

            int j = (short)o; // тут будет ошибка
        }
    }
    class MyUserType
    {
        // пользовательский тип
    }

    struct MyStruct
    {
        // пользовательский структура
    }

    interface IMyUser
    {
        // пользовательский тип в формате интерфейса
    }

    delegate void Message(); // делегаты
}
